import * as admin from 'firebase-admin';

export declare type DocumentSnapshot = admin.firestore.DocumentSnapshot;

export type PushNotification = {
  notification: {
    title: string
    body?: string,
    imageUrl?: string
  },
  data: {
    user: string
    timestamp: string
    message: string
    notificationType: 'new-share' | 'permission-request' | 'share-back' | 'permissions-approval' | 'new-connection' | 'tip-of-the-day' | 'otp-verification' | 'otp-generation' | 'share-public-address-tip' | 'assigned-driver' | 'assigned-customer' | 'invite-member'
    key: string
    message_id: string
    message_name: string,
    routeName: string,
    routeId: string
  },
  token: string
}

export type User = {
  uid?: string;
  metaData: {
    appVersion?: string;
    fcmToken?: string;
    createdAt?: number;
    lastSeen?: number;
    source?: string;
  }
  settings: {
    authPhone?: string;
    authEmail?: string;
    isOldBusiness?: boolean;
  }
  organizations?: Map<string, UserOrganization>;
  locations?: Array<string>;
  profile: {
    userName?: string;
    firstName?: string;
    lastName?: string;
    displayEmail?: string;
    displayPhone?: string;
    phoneNumber?: string;
    isd?: string;
    labelEmail?: string;
    labelPhone?: string;
    displayEmail1?: string;
    displayPhone1?: string;
    phoneNumber1?: string;
    isd1?: string;
    labelEmail1?: string;
    labelPhone1?: string;
    displayEmail2?: string;
    displayPhone2?: string;
    phoneNumber2?: string;
    isd2?: string;
    labelEmail2?: string;
    labelPhone2?: string;
    profileImage?: string;
  };
};
export type Location = {
  lid?: string;
  details: {
    locationName?: string;
    city?: string;
    country?: string;
    region?: string;
    streetName?: string;
    directions?: string;
    apartmentNumber?: string; // in miro also name string/number?
    houseNumber?: string; // in miro also a street
    crossRoad?: string;
    area?: string;
    localOfAddress: string;
    floor: string;
  }
  position: {
    latitude?: number;
    longitude?: number;
    accuracy?: number;
    positioningTech: string;
    hash: string;

  }
  localBranch: {
    customDescription?: string;
    isOpenHoursCreated?: boolean;
    openHours?: {
      monday: {
        openTime: string;
        closedTime: string;
        isClosedAllDay: boolean;
        isOpenAllDay: boolean;
      };
      tuesday: {
        openTime: string;
        closedTime: string;
        isClosedAllDay: boolean;
        isOpenAllDay: boolean;
      };
      wednesday: {
        openTime: string;
        closedTime: string;
        isClosedAllDay: boolean;
        isOpenAllDay: boolean;
      };
      thursday: {
        openTime: string;
        closedTime: string;
        isClosedAllDay: boolean;
        isOpenAllDay: boolean;
      };
      friday: {
        openTime: string;
        closedTime: string;
        isClosedAllDay: boolean;
        isOpenAllDay: boolean;
      };
      saturday: {
        openTime: string;
        closedTime: string;
        isClosedAllDay: boolean;
        isOpenAllDay: boolean;
      };
      sunday: {
        openTime: string;
        closedTime: string;
        isClosedAllDay: boolean;
        isOpenAllDay: boolean;
      };
    };
    locationPhone?: number;
    locationEmail: string;
    labelEmail: string;
    labelPhone?: string;
    isd?: string;
    isd1?: string;
    isd2?: string;
    locationPhone1?: number;
    locationEmail1?: string;
    labelEmail1?: string;
    labelPhone1?: string;
    locationPhone2?: number;
    locationEmail2?: string;
    labelEmail2?: string;
    labelPhone2?: string;
    holidays?: Array<string>;
    exceptions?: Array<string>;

  }
  categories?: Array<string>;
  config: {
    visible?: boolean;
    businessName: string;
    businessLogo: string;
    website: string;
    businessDescription: string;
    locationId?: string;
    createdAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    updatedAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    public?: boolean;
    requestedPublic?: boolean
    businessVerified?: boolean
  }
  owner: {
    uid: string;
    ownerType?: string;
    userName: string;
    createdBy?: string
  },
  sharedWith: Record<string, boolean>,
  images?: Array<string>;
}

export type PlanDetail = {
  lid?: string;
  renewalInterval: string;
  nextBillingDate: number;
  paymentDate: number;
  startDate: number;
  plan: string;
  amount: number;
  paymentType: 'Freemium' | 'Strategic Partner' | 'Paid';
  isSevendayMailSent: boolean;
  isFifteendayMailSent: boolean;
}

export type LocationBilling = {
  active: boolean,
  payment: boolean,
  currentPlan: PlanDetail,
  billingHistory: Array<PlanDetail>
}

export type Notifications = {
  id?: string;
  message?: string;
  status?: string;
  sender?: string;
  locationId?: string;
  recipient?: string;
  campaignId?: string;
  driverUsername?: string;
  customerUsername?: string;
  driverData: any;
  customerData: any;
  senderData?: any,
  receiverData?: any,
  routeName?: string,
  routeId?: string,
  config: {
    notificationType: 'new-share' | 'permission-request' | 'share-back' | 'permissions-approval' | 'new-connection' | 'tip-of-the-day' | 'otp-verification' | 'otp-generation' | 'share-public-address-tip' | 'assigned-driver' | 'assigned-customer' //this can be an enum
    createdAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    updatedAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    notificationId: string;
  };
  image: string;
  title: string;
};

export type ReservedUsername = {
  userName?: string;
  country?: string;
  language?: string;
  Config: {
    createdAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    updatedAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    enabled: boolean;
    isUsed: boolean;
  };
};

export type Category = {
  id?: string;
  iconUrl?: string;
  relatedKeywords: string[];
  defaultName: string;
  metaData: {
    createdAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    updatedAt?: number; //we have timestamps as Date, string and number lets sync on what to use
    enabled: boolean;
  };
};

export type sendGridMessage = {
  from: {
    email: string,
    name: string
  },
  to: {
    email: string,
    name: string
  },
  template_id: string
}
export type OrganizationUser = {
  roleId: string;
  status: string;
  locations: Array<string>
  completedTasks: [];
  assignedTasks: [];
  connections: any
}

export type UserOrganization = {
  roleId: string;
  organizationId: string;
  locations?: [string];
  status: string;
}

export type OrganizationRole = {
  name: string;
}

export type organizationFeature = {
  enabled: boolean;
}

export type Organization = {
  id?: string;
  ownerId?: string;
  profile: {
    businessName: string;
    businessTypeId: string;
    businessDescription: string;
    displayPhone: string;
    displayEmail: string;
    labelEmail?: string;
    labelPhone?: string;
    displayEmail1?: string;
    displayPhone1?: string;
    phoneNumber1?: string;
    isd1?: string;
    labelEmail1?: string;
    labelPhone1?: string;
    displayEmail2?: string;
    displayPhone2?: string;
    phoneNumber2?: string;
    isd2?: string;
    labelEmail2?: string;
    labelPhone2?: string;
    website: string;
    profileImage: string;
    userName: string;
    phoneNumber: string;
    isd: string;
  };
  billing?: {
    locationsBilling: Map<string, LocationBilling>;
    billingHistory: Array<PlanDetail>;
  }
  connections: Array<string>;
  locations: Array<string>;
  employees: Map<string, OrganizationUser>;
  roles: Map<string, OrganizationRole>;
  config: {
    createdAt: number;
    updatedAt: number;
    enabledFeatures: Map<string, organizationFeature>;
    verified: boolean;
    formSubmitted: string;
    toBeDeletedOn: number;
    status: string;
    lastLogin: number,
    enabled: boolean;
    authEmail: string;
  }

};

export type OrganizationPublic = {
  profile: {
    name: string;
    businessTypeId: string;
    businessDescription: string;
    displayPhone: string;
    displayEmail: string;
    labelEmail?: string;
    labelPhone?: string;
    displayEmail1?: string;
    displayPhone1?: string;
    phoneNumber1?: string;
    isd1?: string;
    labelEmail1?: string;
    labelPhone1?: string;
    displayEmail2?: string;
    displayPhone2?: string;
    phoneNumber2?: string;
    isd2?: string;
    labelEmail2?: string;
    labelPhone2?: string;
    website: string;
    profileImage: string;
    userName: string;
  };

};

export type ConnectionProfile = {
  profileAccess: boolean;
  name?: string;
  profileImage?: string;
  userName?: string;
  displayPhone?: string;
  displayEmail?: string;
  labelEmail?: string;
  labelPhone?: string;
  displayEmail1?: string;
  displayPhone1?: string;
  phoneNumber1?: string;
  isd1?: string;
  labelEmail1?: string;
  labelPhone1?: string;
  displayEmail2?: string;
  displayPhone2?: string;
  phoneNumber2?: string;
  isd2?: string;
  labelEmail2?: string;
  labelPhone2?: string;
  businessVerified?: boolean
}
export type ConnectionDetail = {
  profile: ConnectionProfile;
  locations: Array<string>;
  isOrg: boolean,
  activeRequests: Array<{
    createdAt: number;
    active: boolean;
    updatedAt?: number;
  }>
}

export type SenderConnectionDetail = {
  profile: ConnectionProfile;
  locations: Array<string>;
  isOrg: boolean,
  activeRequests: Array<{
    createdAt: number;
    active: boolean;
    updatedAt?: number;
  }>
}
export interface Connection {
  senderUid: string;
  receiverUid: string;
  receiver: ConnectionDetail;
  config: {
    visible: boolean;
    createdAt: number;
    updatedAt?: number;
    initiator?: boolean;
  }
  sender: SenderConnectionDetail;
  isInherited?: boolean

}

export type Otp = {
  id: string;
  requestId: string;
  uid: string;
  bid: string;
  isExpired: boolean;
  createdAt: number;
  verifiedAt: number;
  expiry: number;
  otp: string;
}

export type NotificationCount = {
  uid: string
  count: number
  createdAt?: number;
  updatedAt?: number;
}
export type ReservedAlias = {
  name: string
  timestamp: string
}

export type ApigeeRequest = {
  apiName: string,
  businessUid: string,
  customerUid?: string,
  driverUid?: string,
  orderId?: string,
  created_at: string
  responseStatus?: string;
  notificationType?: string;
  query?: string;
  connectionId?: string;
  locationId?: string;
}

export type LocationsAction = {
  id: string;
  locationId: string;
  locationName: string;
  organizationName: string;
  userId: string;
  userEmail: string;
  userDisplayName: string;
  userRole: string;
  ownerId: string;
  ownerEmail: string;



}