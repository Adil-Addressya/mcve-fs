import { Response, NextFunction } from 'express';
import { AuthRequest } from '../../types';
import * as admin from 'firebase-admin';
admin.firestore().settings({ ignoreUndefinedProperties: true })

export const checkSubCollectionDummyData = async (req: AuthRequest, res: Response, next: NextFunction): Promise<Response | void> => {
  try {
    let id = req.params.key

    const data = await admin.firestore().collectionGroup('dummySubCollection')
      .where('city', '==', id)
      .get()
      .then(snapshot => {
        if (snapshot.empty) {
          return null;
        }
        if (snapshot.empty) {
          return [];
        }
        return snapshot.docs.map(doc => doc.data());
      });
    return res.status(200).json({ status: 200, count: data.length, data: data });
  }
  catch (error) {
    console.error(JSON.stringify(error));
    return res.status(500).send({ error: error.message });
  }
}

export const checkInsideObjectDummyData = async (req: AuthRequest, res: Response, next: NextFunction): Promise<Response | void> => {
  try {
    let key = req.params.key

    const data = await admin.firestore().collection('dummyData')
      .where("profile.city", "==", key)
      .get()
      .then(snapshot => {
        if (snapshot.empty) {
          return null;
        }
        if (snapshot.empty) {
          return [];
        }
        return snapshot.docs.map(doc => doc.data());
      });


    return res.status(200).json({ status: 200, count: data.length, data: data });
  }
  catch (error) {
    console.error(JSON.stringify(error));
    return res.status(500).send({ error: error.message });
  }
}

export const checkNormalDummyData = async (req: AuthRequest, res: Response, next: NextFunction): Promise<Response | void> => {
  try {
    let key = req.params.key

    const data = await admin.firestore().collection('dummyData')
      .where("city", "==", key)
      .get()
      .then(snapshot => {
        if (snapshot.empty) {
          return null;
        }
        if (snapshot.empty) {
          return [];
        }
        return snapshot.docs.map(doc => doc.data());
      });


    return res.status(200).json({ status: 200, count: data.length, data: data });
  }
  catch (error) {
    console.error(JSON.stringify(error));
    return res.status(500).send({ error: error.message });
  }
}

export const checkSubCollectionDummyDataArray = async (req: AuthRequest, res: Response, next: NextFunction): Promise<Response | void> => {
  try {
    let id = req.body.key

    const data = await admin.firestore().collectionGroup('dummySubCollection')
      .where('city', 'in', id)
      .get()
      .then(snapshot => {
        if (snapshot.empty) {
          return null;
        }
        if (snapshot.empty) {
          return [];
        }
        return snapshot.docs.map(doc => doc.data());
      });
    return res.status(200).json({ status: 200, count: data.length, data: data });
  }
  catch (error) {
    console.error(JSON.stringify(error));
    return res.status(500).send({ error: error.message });
  }
}

export const checkInsideObjectDummyDataArray = async (req: AuthRequest, res: Response, next: NextFunction): Promise<Response | void> => {
  try {
    let key = req.body.key

    console.log(key)

    const data = await admin.firestore().collection('dummyData')
      .where("profile.city", "in", key)
      .get()
      .then(snapshot => {
        if (snapshot.empty) {
          return null;
        }
        if (snapshot.empty) {
          return [];
        }
        return snapshot.docs.map(doc => doc.data());
      });


    return res.status(200).json({ status: 200, count: data.length, data: data });
  }
  catch (error) {
    console.error(JSON.stringify(error));
    return res.status(500).send({ error: error.message });
  }
}

export const checkNormalDummyDataByArray = async (req: AuthRequest, res: Response, next: NextFunction): Promise<Response | void> => {
  try {
    let key = req.body.key

    const data = await admin.firestore().collection('dummyData')
      .where("city", "in", key)
      .get()
      .then(snapshot => {
        if (snapshot.empty) {
          return null;
        }
        if (snapshot.empty) {
          return [];
        }
        return snapshot.docs.map(doc => doc.data());
      });


    return res.status(200).json({ status: 200, count: data.length, data: data });
  }
  catch (error) {
    console.error(JSON.stringify(error));
    return res.status(500).send({ error: error.message });
  }
}